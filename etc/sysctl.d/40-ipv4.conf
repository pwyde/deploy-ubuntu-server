## Performance parameters.

# The default and maximum amount for the receive/send socket memory.
# By default the Linux network stack is not configured for high speed
# large file transfer across WAN links. This is done to save memory
# resources. One can easily tune Linux network stack by increasing network
# buffers size for high-speed networks that connect server systems to handle
# more network packets.
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
net.ipv4.udp_rmem_min = 16384
net.ipv4.udp_wmem_min = 16384

# An extension to the transmission control protocol (TCP) that helps
# reduce network latency by enabling data to be exchanged during the
# senderâ€™s initial TCP SYN.
net.ipv4.tcp_fastopen = 3

# The maximum queue length of pending connections 'Waiting Acknowledgment'.
# In the event of a synflood DOS attack, this queue can fill up pretty
# quickly, at which point tcp_syncookies will kick in allowing the system
# to continue to respond to legitimate traffic, and allowing you to gain
# access to block malicious IPs.
# If the server suffers from overloads at peak times, this value may be
# increased a little bit.
net.ipv4.tcp_max_syn_backlog = 65536

# The maximum number of sockets in 'TIME_WAIT' state.
# After reaching this number the system will start destroying the socket
# in this state. Increase this to prevent simple DOS attacks.
net.ipv4.tcp_max_tw_buckets = 65536

# Whether TCP should start at the default window size only for new
# connections or also for existing connections that have been idle for too
# long. It kills persistent single connection performance and should be
# turned off.
net.ipv4.tcp_slow_start_after_idle = 0

# Whether TCP should reuse an existing connection in the TIME-WAIT state
# for a new outgoing connection if the new timestamp is strictly bigger
# than the most recent timestamp recorded for the previous connection.
# This helps avoid from running out of available network sockets.
net.ipv4.tcp_tw_reuse = 1

# Fast-fail FIN connections which are useless.
net.ipv4.tcp_fin_timeout = 15

# TCP keepalive is a mechanism for TCP connections that help to determine
# whether the other end has stopped responding or not.
# TCP will send the keepalive probe contains null data to the network peer
# several times after a period of idle time. If the peer does not respond,
# the socket will be closed automatically. By default, TCP keepalive
# process waits for two hours (7200 secs) for socket activity before
# sending the first keepalive probe, and then resend it every 75 seconds.
# As long as there is TCP/IP socket communications going on and active, no
# keepalive packets are needed.
# With the following settings, serving application will detect dead TCP
# connections after 120 seconds (60s + 10s + 10s + 10s + 10s + 10s + 10s).
net.ipv4.tcp_keepalive_time = 60
net.ipv4.tcp_keepalive_intvl = 10
net.ipv4.tcp_keepalive_probes = 6

# The longer the MTU the better for performance, but the worse for
# reliability. This is because a lost packet means more data to be
# retransmitted and because many routers on the Internet can't deliver very
# long packets. Enable smart MTU discovery when an ICMP black hole detected.
net.ipv4.tcp_mtu_probing = 1

# Turn timestamps off to reduce performance spikes related to timestamp
# generation.
net.ipv4.tcp_timestamps = 0


## Security parameters.

# TCP SYN cookie protection (default).
# Helps protect against SYN flood attacks.
# Only activated when net.ipv4.tcp_max_syn_backlog is reached.
net.ipv4.tcp_syncookies = 1

# Protect against TCP time-wait assassination hazards.
# Drop RST packets for sockets in the time-wait state
# (not widely supported outside of linux, but conforms to RFC).
net.ipv4.tcp_rfc1337 = 1

# Sets the kernels reverse path filtering mechanism to value 1 (on).
# Will do source validation of the packet's recieved from all the 
# interfaces on the machine. Protects from attackers that are using
# IP spoofing methods to do harm.
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1

# TCP Timestamps
# + Protect against wrapping sequence numbers (at gigabit speeds).
# + Round trip time calculation implemented in TCP.
# - Causes extra overhead and allows uptime detection by scanners like
#   nmap.
# Note: Enable @ gigabit speeds.
net.ipv4.tcp_timestamps = 0
#net.ipv4.tcp_timestamps = 1

# Logs unroutable packets.
net.ipv4.conf.default.log_martians = 1
net.ipv4.conf.all.log_martians = 1

# Ignore echo broadcast requests to prevent being part of smurf
# attacks (default).
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Ignore bogus ICMP errors (default).
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Disable sending of ICMP redirect packets.
# Note: If the system is not a router, ICMP redirects should be
#       disabled.
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.send_redirects = 0

# Disable ICMP redirects. Only allow secure.
#net.ipv4.conf.default.secure_redirects = 1 (default)
#net.ipv4.conf.all.secure_redirects = 1 (default)
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
